import { Request, Response, NextFunction } from "express";

// Define a custom error type to capture the structure of the error object
interface CustomError extends Error {
  name: string;
  message: string;
  stack?: string;
}

export default class ErrorHandlers {
  static errorCallBack() {
    return (err: CustomError, req: Request, res: Response, next: NextFunction): void => {
      console.error(
        `\n${new Date()}  \n Route : ${req.originalUrl} \n Name :  ${err.name} \n Message :  ${err.message} \n Stack : ${err.stack}`
      );
      const { name, message } = err;
      let status = 0;
      let displayMsg = "";

      switch (name) {
        case "request entity too large":
          status = 400;
          displayMsg = "INTERNAL_SERVER_ERROR";
          break;
        case "ValidationError":
          status = 400;
          displayMsg = message;
          break;
        case "ReferenceError":
          status = 500;
          displayMsg = "PROGRAMMING_ERROR";
          break;
        case "JsonWebTokenError":
          status = 403;
          displayMsg = message;
          break;
        case "TokenExpiredError":
          status = 403;
          displayMsg = "SESSION_EXPIRE";
          break;
        case "PermissionError":
          status = 403;
          displayMsg = message;
          break;
        case "Error":
          status = 400;
          displayMsg = message;
          break;
        case "TypeError":
          status = 500;
          displayMsg = message;
          break;
        default:
          status = 500;
          displayMsg = "INTERNAL_SERVER_ERROR";
      }

      res.status(status).json({ message: displayMsg });
    };
  }
}

