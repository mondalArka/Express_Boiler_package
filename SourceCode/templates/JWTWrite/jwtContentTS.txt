import jwt from "jsonwebtoken";
import { Decoded } from "../utils/interfaces"
import User from "../Entity/User";
import * as dotenv from "dotenv";
dotenv.config();
// Load environment variables
dotenv.config();

export default class JWTService {
  // Generate JWT token
 public static generateToken(data:any): string {
    return jwt.sign(
      {
        id: data.id,
        email: data.email,
        createdAt: Date.now(),
      },
      process.env.AUTH_SECRET as string, // Type assertion to ensure the value exists
      { expiresIn: "30min" }
    );
  }

  // Verify JWT token and return decoded data
 public static async verifyToken(token: string): Promise<Decoded> {
      const decode = jwt.verify(token, process.env.AUTH_SECRET as string) as Decoded;      
      if (!decode) throw new Error("Token not valid!");
      const data = await User.findUnique({ where: { id: Number(decode.id) }});
      if (!data) throw new Error("User not found!");

      return decode;
  }
}

